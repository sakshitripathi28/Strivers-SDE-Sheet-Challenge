#include <bits/stdc++.h> 
bool isSafe(vector<vector<int> > &maze, int n,int x,int y,vector<vector<int>> visited)
{
  if((x>=0 && x<n ) && (y>=0 && y<n) && maze[x][y] == 1 && visited[x][y] == 0)
  {
    return true;
  }
  else
  {
    return false;
  }
}
void solve(vector<vector<int> > &maze, int n,int x,int y,vector<int> path,vector<vector<int>> &ans,vector<vector<int>> visited)
{
  if(x == n-1 && y == n-1)
  {
    vector<int> temp;
    visited[x][y] = 1;
    
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
        temp.push_back(visited[i][j]);

    visited[x][y] = 0;
    ans.push_back(temp);
    return;
  }

  visited[x][y] = 1;

  //down 
  int newx = x+1;
  int newy = y;
  if(isSafe(maze,n,newx,newy,visited))
  {
    path.push_back(1);
    solve(maze, n, newx, newy, path, ans,visited);
    path.pop_back();
  }

  //left
  newx = x;
  newy = y-1;
  if(isSafe(maze,n,newx,newy,visited))
  {
    path.push_back(1);
    solve(maze, n, newx, newy, path, ans,visited);
    path.pop_back();
  }
  //right
  newx = x;
  newy = y+1;
  if(isSafe(maze,n,newx,newy,visited))
  {
    path.push_back(1);
    solve(maze, n, newx, newy, path, ans,visited);
    path.pop_back();
  }
  //up
  newx = x-1;
  newy = y;
  if(isSafe(maze,n,newx,newy,visited))
  {
    path.push_back(1);
    solve(maze, n, newx, newy, path, ans,visited);
    path.pop_back();
  }

  visited[x][y] = 0;
}
vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.

  vector<vector<int>> ans;
  vector<int> path;

  if(maze[0][0] == 0 || maze[n-1][n-1] == 0) return ans;

  int srcx = 0;
  int srcy = 0;

  vector<vector<int>> visited = maze;

  for(int i=0;i<n;i++)
  {
    for(int j=0;j<n;j++)
    {
      visited[i][j] = 0;
    }
  }

  solve(maze,n,srcx,srcy,path,ans,visited);

  return ans;

}
