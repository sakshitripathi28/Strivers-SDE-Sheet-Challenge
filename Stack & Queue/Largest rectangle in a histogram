 #include<bits/stdc++.h>
 vector<int> NSL(vector < int > & heights)
 {
   vector<int> left;
   stack<pair<int,int>> st;

   for(int i=0;i<heights.size();i++)
   {
    //  if(st.empty())
    //  {
    //    left.push_back(-1);
    //  }
    //  else
    //  {
    //    if(st.top().first < heights[i])
    //    {
    //      left.push_back(st.top().second);
    //    }
    //    else if(st.top().first >= heights[i])
    //    {
         while(!st.empty() && st.top().first >= heights[i])
         {
           st.pop();
         }

         if(st.empty())
         {
           left.push_back(-1);
         }
         else
         {
           left.push_back(st.top().second);
         }
    //    }
    //  }
     st.push({heights[i],i});
   }

   return left;
 }

 vector<int> NSR(vector < int > & heights)
 {
   vector<int> right;
   stack<pair<int,int>> st;
    int n = heights.size();
   for(int i=heights.size()-1;i>=0;i--)
   {
    //  if(st.empty())
    //  {
    //    right.push_back(n);
    //  }
    //  else
    //  {
    //    if(st.top().first < heights[i])
    //    {
    //      right.push_back(st.top().second);
    //    }
    //    else if(st.top().first >= heights[i])
    //    {
         while(!st.empty() && st.top().first >= heights[i])
         {
           st.pop();
         }

         if(st.empty())
         {
           right.push_back(n);
         }
         else
         {
           right.push_back(st.top().second);
         }
    //    }
    //  }
     st.push({heights[i],i});
   }

    reverse(right.begin(),right.end());
   return right;
 }

 int largestRectangle(vector < int > & heights) {
   // Write your code here.
  
   vector<int> left = NSL(heights);
   vector<int> right = NSR(heights);
      
      int n= heights.size();
    vector<int> width(n);

    vector<int> area(n);
   int maxi = INT_MIN;

   for(int i=0;i<heights.size();i++)
   {
      width[i] = right[i] - left[i] - 1;
      area[i] = heights[i] * width[i];
      maxi = max(maxi,area[i]);
   }

   return maxi;
 }
